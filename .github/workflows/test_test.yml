name: Poll AT Tasks and Trigger Tests

on:
  schedule:
    - cron: '*/5 * * * *'  # every 5 minutes
  workflow_dispatch: {}

jobs:
  poll-and-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Poll GitHub Project for "AT" tasks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = 'PVT_kwHOBnoPGc4A3Hxd';
            const response = await github.graphql(`
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 20) {
                      nodes {
                        content {
                          ... on Issue {
                            id
                            title
                            body
                            url
                            labels(first: 10) {
                              nodes {
                                name
                              }
                            }
                          }
                        }
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const atItems = response.node.items.nodes.filter(item =>
              item.fieldValues.nodes.some(field =>
                field.field?.name === 'Status' && field.name === 'AT')
            );

            core.info(`Found ${atItems.length} task(s) in "AT" column.`);

            for (const item of atItems) {
              const issueUrl = item.content.url;
              core.info(`Triggering test for issue: ${issueUrl}`);

              await github.rest.repos.createDispatchEvent({
                owner: 'your-org',
                repo: 'repo3',
                event_type: 'run-playwright-tests',
                client_payload: {
                  issue_url: issueUrl,
                  source: 'at-poller',
                  triggered_at: new Date().toISOString(),
                }
              });
            }
