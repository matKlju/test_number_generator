name: Poll AT Tasks and Trigger Tests

on:
  schedule:
    - cron: '*/5 * * * *'  # every 5 minutes
  workflow_dispatch: {}

jobs:
  poll-and-dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Poll GitHub Project for "AT" tasks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_DISPATCH }}
          script: |
            const projectId = 'PVT_kwHOBnoPGc4A3Hxd';
            const response = await github.graphql(`
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 20) {
                      nodes {
                        content {
                          ... on Issue {
                            id
                            title
                            body
                            url
                            labels(first: 10) {
                              nodes {
                                name
                              }
                            }
                          }
                        }
                        fieldValues(first: 10) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                              field {
                                ... on ProjectV2SingleSelectField {
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `);

            const atItems = response.node.items.nodes.filter(item =>
              item.fieldValues.nodes.some(field =>
                field.field?.name === 'Status' && field.name === 'AT')
            );

            core.notice(`Found ${atItems.length} task(s) in "AT" column.`);

            for (const item of atItems) {
              if (!item.content || item.content.__typename !== 'Issue') continue;
              const issue = item.content;
              core.notice(`Triggering test for issue: ${issue.url}`);

              const payload = {
                task_id: issue.id,
                task_title: issue.title,
                task_description: issue.body,
                issue_url: issue.url,
                source: 'at-poller',
                triggered_at: new Date().toISOString(),
              };

              core.notice(`Dispatch payload: ${JSON.stringify(payload, null, 2)}`);

              const dispatchResponse = await github.rest.repos.createDispatchEvent({
                owner: 'matKlju',
                repo: 'test_pw_repo',
                event_type: 'run-playwright-tests',
                client_payload: payload
              });

              core.notice(`Dispatch event sent: ${JSON.stringify(dispatchResponse.status)} - ${JSON.stringify(dispatchResponse.url || 'OK')}`);
            }
